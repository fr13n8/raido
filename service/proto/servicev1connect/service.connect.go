// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/fr13n8/raido/service/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RaidoServiceName is the fully-qualified name of the RaidoService service.
	RaidoServiceName = "service.v1.RaidoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RaidoServiceGetSessionsProcedure is the fully-qualified name of the RaidoService's GetSessions
	// RPC.
	RaidoServiceGetSessionsProcedure = "/service.v1.RaidoService/GetSessions"
	// RaidoServiceSessionTunnelStartProcedure is the fully-qualified name of the RaidoService's
	// SessionTunnelStart RPC.
	RaidoServiceSessionTunnelStartProcedure = "/service.v1.RaidoService/SessionTunnelStart"
	// RaidoServiceSessionTunnelStopProcedure is the fully-qualified name of the RaidoService's
	// SessionTunnelStop RPC.
	RaidoServiceSessionTunnelStopProcedure = "/service.v1.RaidoService/SessionTunnelStop"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	raidoServiceServiceDescriptor                  = proto.File_service_proto.Services().ByName("RaidoService")
	raidoServiceGetSessionsMethodDescriptor        = raidoServiceServiceDescriptor.Methods().ByName("GetSessions")
	raidoServiceSessionTunnelStartMethodDescriptor = raidoServiceServiceDescriptor.Methods().ByName("SessionTunnelStart")
	raidoServiceSessionTunnelStopMethodDescriptor  = raidoServiceServiceDescriptor.Methods().ByName("SessionTunnelStop")
)

// RaidoServiceClient is a client for the service.v1.RaidoService service.
type RaidoServiceClient interface {
	GetSessions(context.Context, *connect.Request[proto.GetSessionsRequest]) (*connect.Response[proto.GetSessionsResponse], error)
	SessionTunnelStart(context.Context, *connect.Request[proto.SessionTunnelStartRequest]) (*connect.Response[proto.SessionTunnelStartResponse], error)
	SessionTunnelStop(context.Context, *connect.Request[proto.SessionTunnelStopRequest]) (*connect.Response[proto.SessionTunnelStopResponse], error)
}

// NewRaidoServiceClient constructs a client for the service.v1.RaidoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaidoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RaidoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &raidoServiceClient{
		getSessions: connect.NewClient[proto.GetSessionsRequest, proto.GetSessionsResponse](
			httpClient,
			baseURL+RaidoServiceGetSessionsProcedure,
			connect.WithSchema(raidoServiceGetSessionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sessionTunnelStart: connect.NewClient[proto.SessionTunnelStartRequest, proto.SessionTunnelStartResponse](
			httpClient,
			baseURL+RaidoServiceSessionTunnelStartProcedure,
			connect.WithSchema(raidoServiceSessionTunnelStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sessionTunnelStop: connect.NewClient[proto.SessionTunnelStopRequest, proto.SessionTunnelStopResponse](
			httpClient,
			baseURL+RaidoServiceSessionTunnelStopProcedure,
			connect.WithSchema(raidoServiceSessionTunnelStopMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// raidoServiceClient implements RaidoServiceClient.
type raidoServiceClient struct {
	getSessions        *connect.Client[proto.GetSessionsRequest, proto.GetSessionsResponse]
	sessionTunnelStart *connect.Client[proto.SessionTunnelStartRequest, proto.SessionTunnelStartResponse]
	sessionTunnelStop  *connect.Client[proto.SessionTunnelStopRequest, proto.SessionTunnelStopResponse]
}

// GetSessions calls service.v1.RaidoService.GetSessions.
func (c *raidoServiceClient) GetSessions(ctx context.Context, req *connect.Request[proto.GetSessionsRequest]) (*connect.Response[proto.GetSessionsResponse], error) {
	return c.getSessions.CallUnary(ctx, req)
}

// SessionTunnelStart calls service.v1.RaidoService.SessionTunnelStart.
func (c *raidoServiceClient) SessionTunnelStart(ctx context.Context, req *connect.Request[proto.SessionTunnelStartRequest]) (*connect.Response[proto.SessionTunnelStartResponse], error) {
	return c.sessionTunnelStart.CallUnary(ctx, req)
}

// SessionTunnelStop calls service.v1.RaidoService.SessionTunnelStop.
func (c *raidoServiceClient) SessionTunnelStop(ctx context.Context, req *connect.Request[proto.SessionTunnelStopRequest]) (*connect.Response[proto.SessionTunnelStopResponse], error) {
	return c.sessionTunnelStop.CallUnary(ctx, req)
}

// RaidoServiceHandler is an implementation of the service.v1.RaidoService service.
type RaidoServiceHandler interface {
	GetSessions(context.Context, *connect.Request[proto.GetSessionsRequest]) (*connect.Response[proto.GetSessionsResponse], error)
	SessionTunnelStart(context.Context, *connect.Request[proto.SessionTunnelStartRequest]) (*connect.Response[proto.SessionTunnelStartResponse], error)
	SessionTunnelStop(context.Context, *connect.Request[proto.SessionTunnelStopRequest]) (*connect.Response[proto.SessionTunnelStopResponse], error)
}

// NewRaidoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaidoServiceHandler(svc RaidoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	raidoServiceGetSessionsHandler := connect.NewUnaryHandler(
		RaidoServiceGetSessionsProcedure,
		svc.GetSessions,
		connect.WithSchema(raidoServiceGetSessionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceSessionTunnelStartHandler := connect.NewUnaryHandler(
		RaidoServiceSessionTunnelStartProcedure,
		svc.SessionTunnelStart,
		connect.WithSchema(raidoServiceSessionTunnelStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceSessionTunnelStopHandler := connect.NewUnaryHandler(
		RaidoServiceSessionTunnelStopProcedure,
		svc.SessionTunnelStop,
		connect.WithSchema(raidoServiceSessionTunnelStopMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/service.v1.RaidoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RaidoServiceGetSessionsProcedure:
			raidoServiceGetSessionsHandler.ServeHTTP(w, r)
		case RaidoServiceSessionTunnelStartProcedure:
			raidoServiceSessionTunnelStartHandler.ServeHTTP(w, r)
		case RaidoServiceSessionTunnelStopProcedure:
			raidoServiceSessionTunnelStopHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRaidoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRaidoServiceHandler struct{}

func (UnimplementedRaidoServiceHandler) GetSessions(context.Context, *connect.Request[proto.GetSessionsRequest]) (*connect.Response[proto.GetSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.v1.RaidoService.GetSessions is not implemented"))
}

func (UnimplementedRaidoServiceHandler) SessionTunnelStart(context.Context, *connect.Request[proto.SessionTunnelStartRequest]) (*connect.Response[proto.SessionTunnelStartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.v1.RaidoService.SessionTunnelStart is not implemented"))
}

func (UnimplementedRaidoServiceHandler) SessionTunnelStop(context.Context, *connect.Request[proto.SessionTunnelStopRequest]) (*connect.Response[proto.SessionTunnelStopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.v1.RaidoService.SessionTunnelStop is not implemented"))
}
