// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	service "github.com/fr13n8/raido/proto/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RaidoServiceName is the fully-qualified name of the RaidoService service.
	RaidoServiceName = "service.RaidoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RaidoServiceProxyStartProcedure is the fully-qualified name of the RaidoService's ProxyStart RPC.
	RaidoServiceProxyStartProcedure = "/service.RaidoService/ProxyStart"
	// RaidoServiceProxyStopProcedure is the fully-qualified name of the RaidoService's ProxyStop RPC.
	RaidoServiceProxyStopProcedure = "/service.RaidoService/ProxyStop"
	// RaidoServiceAgentListProcedure is the fully-qualified name of the RaidoService's AgentList RPC.
	RaidoServiceAgentListProcedure = "/service.RaidoService/AgentList"
	// RaidoServiceAgentRemoveProcedure is the fully-qualified name of the RaidoService's AgentRemove
	// RPC.
	RaidoServiceAgentRemoveProcedure = "/service.RaidoService/AgentRemove"
	// RaidoServiceTunnelListProcedure is the fully-qualified name of the RaidoService's TunnelList RPC.
	RaidoServiceTunnelListProcedure = "/service.RaidoService/TunnelList"
	// RaidoServiceTunnelStartProcedure is the fully-qualified name of the RaidoService's TunnelStart
	// RPC.
	RaidoServiceTunnelStartProcedure = "/service.RaidoService/TunnelStart"
	// RaidoServiceTunnelStopProcedure is the fully-qualified name of the RaidoService's TunnelStop RPC.
	RaidoServiceTunnelStopProcedure = "/service.RaidoService/TunnelStop"
	// RaidoServiceTunnelPauseProcedure is the fully-qualified name of the RaidoService's TunnelPause
	// RPC.
	RaidoServiceTunnelPauseProcedure = "/service.RaidoService/TunnelPause"
	// RaidoServiceTunnelResumeProcedure is the fully-qualified name of the RaidoService's TunnelResume
	// RPC.
	RaidoServiceTunnelResumeProcedure = "/service.RaidoService/TunnelResume"
	// RaidoServiceTunnelAddRouteProcedure is the fully-qualified name of the RaidoService's
	// TunnelAddRoute RPC.
	RaidoServiceTunnelAddRouteProcedure = "/service.RaidoService/TunnelAddRoute"
	// RaidoServiceTunnelRemoveRouteProcedure is the fully-qualified name of the RaidoService's
	// TunnelRemoveRoute RPC.
	RaidoServiceTunnelRemoveRouteProcedure = "/service.RaidoService/TunnelRemoveRoute"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	raidoServiceServiceDescriptor                 = service.File_service_proto.Services().ByName("RaidoService")
	raidoServiceProxyStartMethodDescriptor        = raidoServiceServiceDescriptor.Methods().ByName("ProxyStart")
	raidoServiceProxyStopMethodDescriptor         = raidoServiceServiceDescriptor.Methods().ByName("ProxyStop")
	raidoServiceAgentListMethodDescriptor         = raidoServiceServiceDescriptor.Methods().ByName("AgentList")
	raidoServiceAgentRemoveMethodDescriptor       = raidoServiceServiceDescriptor.Methods().ByName("AgentRemove")
	raidoServiceTunnelListMethodDescriptor        = raidoServiceServiceDescriptor.Methods().ByName("TunnelList")
	raidoServiceTunnelStartMethodDescriptor       = raidoServiceServiceDescriptor.Methods().ByName("TunnelStart")
	raidoServiceTunnelStopMethodDescriptor        = raidoServiceServiceDescriptor.Methods().ByName("TunnelStop")
	raidoServiceTunnelPauseMethodDescriptor       = raidoServiceServiceDescriptor.Methods().ByName("TunnelPause")
	raidoServiceTunnelResumeMethodDescriptor      = raidoServiceServiceDescriptor.Methods().ByName("TunnelResume")
	raidoServiceTunnelAddRouteMethodDescriptor    = raidoServiceServiceDescriptor.Methods().ByName("TunnelAddRoute")
	raidoServiceTunnelRemoveRouteMethodDescriptor = raidoServiceServiceDescriptor.Methods().ByName("TunnelRemoveRoute")
)

// RaidoServiceClient is a client for the service.RaidoService service.
type RaidoServiceClient interface {
	ProxyStart(context.Context, *connect.Request[service.ProxyStartRequest]) (*connect.Response[service.ProxyStartResponse], error)
	ProxyStop(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.Empty], error)
	AgentList(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.AgentListResponse], error)
	AgentRemove(context.Context, *connect.Request[service.AgentRemoveRequest]) (*connect.Response[service.Empty], error)
	TunnelList(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.TunnelListResponse], error)
	TunnelStart(context.Context, *connect.Request[service.TunnelStartRequest]) (*connect.Response[service.Empty], error)
	TunnelStop(context.Context, *connect.Request[service.TunnelStopRequest]) (*connect.Response[service.Empty], error)
	TunnelPause(context.Context, *connect.Request[service.TunnelPauseRequest]) (*connect.Response[service.Empty], error)
	TunnelResume(context.Context, *connect.Request[service.TunnelResumeRequest]) (*connect.Response[service.Empty], error)
	TunnelAddRoute(context.Context, *connect.Request[service.TunnelAddRouteRequest]) (*connect.Response[service.Empty], error)
	TunnelRemoveRoute(context.Context, *connect.Request[service.TunnelRemoveRouteRequest]) (*connect.Response[service.Empty], error)
}

// NewRaidoServiceClient constructs a client for the service.RaidoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaidoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RaidoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &raidoServiceClient{
		proxyStart: connect.NewClient[service.ProxyStartRequest, service.ProxyStartResponse](
			httpClient,
			baseURL+RaidoServiceProxyStartProcedure,
			connect.WithSchema(raidoServiceProxyStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		proxyStop: connect.NewClient[service.Empty, service.Empty](
			httpClient,
			baseURL+RaidoServiceProxyStopProcedure,
			connect.WithSchema(raidoServiceProxyStopMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		agentList: connect.NewClient[service.Empty, service.AgentListResponse](
			httpClient,
			baseURL+RaidoServiceAgentListProcedure,
			connect.WithSchema(raidoServiceAgentListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		agentRemove: connect.NewClient[service.AgentRemoveRequest, service.Empty](
			httpClient,
			baseURL+RaidoServiceAgentRemoveProcedure,
			connect.WithSchema(raidoServiceAgentRemoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tunnelList: connect.NewClient[service.Empty, service.TunnelListResponse](
			httpClient,
			baseURL+RaidoServiceTunnelListProcedure,
			connect.WithSchema(raidoServiceTunnelListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tunnelStart: connect.NewClient[service.TunnelStartRequest, service.Empty](
			httpClient,
			baseURL+RaidoServiceTunnelStartProcedure,
			connect.WithSchema(raidoServiceTunnelStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tunnelStop: connect.NewClient[service.TunnelStopRequest, service.Empty](
			httpClient,
			baseURL+RaidoServiceTunnelStopProcedure,
			connect.WithSchema(raidoServiceTunnelStopMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tunnelPause: connect.NewClient[service.TunnelPauseRequest, service.Empty](
			httpClient,
			baseURL+RaidoServiceTunnelPauseProcedure,
			connect.WithSchema(raidoServiceTunnelPauseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tunnelResume: connect.NewClient[service.TunnelResumeRequest, service.Empty](
			httpClient,
			baseURL+RaidoServiceTunnelResumeProcedure,
			connect.WithSchema(raidoServiceTunnelResumeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tunnelAddRoute: connect.NewClient[service.TunnelAddRouteRequest, service.Empty](
			httpClient,
			baseURL+RaidoServiceTunnelAddRouteProcedure,
			connect.WithSchema(raidoServiceTunnelAddRouteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tunnelRemoveRoute: connect.NewClient[service.TunnelRemoveRouteRequest, service.Empty](
			httpClient,
			baseURL+RaidoServiceTunnelRemoveRouteProcedure,
			connect.WithSchema(raidoServiceTunnelRemoveRouteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// raidoServiceClient implements RaidoServiceClient.
type raidoServiceClient struct {
	proxyStart        *connect.Client[service.ProxyStartRequest, service.ProxyStartResponse]
	proxyStop         *connect.Client[service.Empty, service.Empty]
	agentList         *connect.Client[service.Empty, service.AgentListResponse]
	agentRemove       *connect.Client[service.AgentRemoveRequest, service.Empty]
	tunnelList        *connect.Client[service.Empty, service.TunnelListResponse]
	tunnelStart       *connect.Client[service.TunnelStartRequest, service.Empty]
	tunnelStop        *connect.Client[service.TunnelStopRequest, service.Empty]
	tunnelPause       *connect.Client[service.TunnelPauseRequest, service.Empty]
	tunnelResume      *connect.Client[service.TunnelResumeRequest, service.Empty]
	tunnelAddRoute    *connect.Client[service.TunnelAddRouteRequest, service.Empty]
	tunnelRemoveRoute *connect.Client[service.TunnelRemoveRouteRequest, service.Empty]
}

// ProxyStart calls service.RaidoService.ProxyStart.
func (c *raidoServiceClient) ProxyStart(ctx context.Context, req *connect.Request[service.ProxyStartRequest]) (*connect.Response[service.ProxyStartResponse], error) {
	return c.proxyStart.CallUnary(ctx, req)
}

// ProxyStop calls service.RaidoService.ProxyStop.
func (c *raidoServiceClient) ProxyStop(ctx context.Context, req *connect.Request[service.Empty]) (*connect.Response[service.Empty], error) {
	return c.proxyStop.CallUnary(ctx, req)
}

// AgentList calls service.RaidoService.AgentList.
func (c *raidoServiceClient) AgentList(ctx context.Context, req *connect.Request[service.Empty]) (*connect.Response[service.AgentListResponse], error) {
	return c.agentList.CallUnary(ctx, req)
}

// AgentRemove calls service.RaidoService.AgentRemove.
func (c *raidoServiceClient) AgentRemove(ctx context.Context, req *connect.Request[service.AgentRemoveRequest]) (*connect.Response[service.Empty], error) {
	return c.agentRemove.CallUnary(ctx, req)
}

// TunnelList calls service.RaidoService.TunnelList.
func (c *raidoServiceClient) TunnelList(ctx context.Context, req *connect.Request[service.Empty]) (*connect.Response[service.TunnelListResponse], error) {
	return c.tunnelList.CallUnary(ctx, req)
}

// TunnelStart calls service.RaidoService.TunnelStart.
func (c *raidoServiceClient) TunnelStart(ctx context.Context, req *connect.Request[service.TunnelStartRequest]) (*connect.Response[service.Empty], error) {
	return c.tunnelStart.CallUnary(ctx, req)
}

// TunnelStop calls service.RaidoService.TunnelStop.
func (c *raidoServiceClient) TunnelStop(ctx context.Context, req *connect.Request[service.TunnelStopRequest]) (*connect.Response[service.Empty], error) {
	return c.tunnelStop.CallUnary(ctx, req)
}

// TunnelPause calls service.RaidoService.TunnelPause.
func (c *raidoServiceClient) TunnelPause(ctx context.Context, req *connect.Request[service.TunnelPauseRequest]) (*connect.Response[service.Empty], error) {
	return c.tunnelPause.CallUnary(ctx, req)
}

// TunnelResume calls service.RaidoService.TunnelResume.
func (c *raidoServiceClient) TunnelResume(ctx context.Context, req *connect.Request[service.TunnelResumeRequest]) (*connect.Response[service.Empty], error) {
	return c.tunnelResume.CallUnary(ctx, req)
}

// TunnelAddRoute calls service.RaidoService.TunnelAddRoute.
func (c *raidoServiceClient) TunnelAddRoute(ctx context.Context, req *connect.Request[service.TunnelAddRouteRequest]) (*connect.Response[service.Empty], error) {
	return c.tunnelAddRoute.CallUnary(ctx, req)
}

// TunnelRemoveRoute calls service.RaidoService.TunnelRemoveRoute.
func (c *raidoServiceClient) TunnelRemoveRoute(ctx context.Context, req *connect.Request[service.TunnelRemoveRouteRequest]) (*connect.Response[service.Empty], error) {
	return c.tunnelRemoveRoute.CallUnary(ctx, req)
}

// RaidoServiceHandler is an implementation of the service.RaidoService service.
type RaidoServiceHandler interface {
	ProxyStart(context.Context, *connect.Request[service.ProxyStartRequest]) (*connect.Response[service.ProxyStartResponse], error)
	ProxyStop(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.Empty], error)
	AgentList(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.AgentListResponse], error)
	AgentRemove(context.Context, *connect.Request[service.AgentRemoveRequest]) (*connect.Response[service.Empty], error)
	TunnelList(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.TunnelListResponse], error)
	TunnelStart(context.Context, *connect.Request[service.TunnelStartRequest]) (*connect.Response[service.Empty], error)
	TunnelStop(context.Context, *connect.Request[service.TunnelStopRequest]) (*connect.Response[service.Empty], error)
	TunnelPause(context.Context, *connect.Request[service.TunnelPauseRequest]) (*connect.Response[service.Empty], error)
	TunnelResume(context.Context, *connect.Request[service.TunnelResumeRequest]) (*connect.Response[service.Empty], error)
	TunnelAddRoute(context.Context, *connect.Request[service.TunnelAddRouteRequest]) (*connect.Response[service.Empty], error)
	TunnelRemoveRoute(context.Context, *connect.Request[service.TunnelRemoveRouteRequest]) (*connect.Response[service.Empty], error)
}

// NewRaidoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaidoServiceHandler(svc RaidoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	raidoServiceProxyStartHandler := connect.NewUnaryHandler(
		RaidoServiceProxyStartProcedure,
		svc.ProxyStart,
		connect.WithSchema(raidoServiceProxyStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceProxyStopHandler := connect.NewUnaryHandler(
		RaidoServiceProxyStopProcedure,
		svc.ProxyStop,
		connect.WithSchema(raidoServiceProxyStopMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceAgentListHandler := connect.NewUnaryHandler(
		RaidoServiceAgentListProcedure,
		svc.AgentList,
		connect.WithSchema(raidoServiceAgentListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceAgentRemoveHandler := connect.NewUnaryHandler(
		RaidoServiceAgentRemoveProcedure,
		svc.AgentRemove,
		connect.WithSchema(raidoServiceAgentRemoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceTunnelListHandler := connect.NewUnaryHandler(
		RaidoServiceTunnelListProcedure,
		svc.TunnelList,
		connect.WithSchema(raidoServiceTunnelListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceTunnelStartHandler := connect.NewUnaryHandler(
		RaidoServiceTunnelStartProcedure,
		svc.TunnelStart,
		connect.WithSchema(raidoServiceTunnelStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceTunnelStopHandler := connect.NewUnaryHandler(
		RaidoServiceTunnelStopProcedure,
		svc.TunnelStop,
		connect.WithSchema(raidoServiceTunnelStopMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceTunnelPauseHandler := connect.NewUnaryHandler(
		RaidoServiceTunnelPauseProcedure,
		svc.TunnelPause,
		connect.WithSchema(raidoServiceTunnelPauseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceTunnelResumeHandler := connect.NewUnaryHandler(
		RaidoServiceTunnelResumeProcedure,
		svc.TunnelResume,
		connect.WithSchema(raidoServiceTunnelResumeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceTunnelAddRouteHandler := connect.NewUnaryHandler(
		RaidoServiceTunnelAddRouteProcedure,
		svc.TunnelAddRoute,
		connect.WithSchema(raidoServiceTunnelAddRouteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raidoServiceTunnelRemoveRouteHandler := connect.NewUnaryHandler(
		RaidoServiceTunnelRemoveRouteProcedure,
		svc.TunnelRemoveRoute,
		connect.WithSchema(raidoServiceTunnelRemoveRouteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/service.RaidoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RaidoServiceProxyStartProcedure:
			raidoServiceProxyStartHandler.ServeHTTP(w, r)
		case RaidoServiceProxyStopProcedure:
			raidoServiceProxyStopHandler.ServeHTTP(w, r)
		case RaidoServiceAgentListProcedure:
			raidoServiceAgentListHandler.ServeHTTP(w, r)
		case RaidoServiceAgentRemoveProcedure:
			raidoServiceAgentRemoveHandler.ServeHTTP(w, r)
		case RaidoServiceTunnelListProcedure:
			raidoServiceTunnelListHandler.ServeHTTP(w, r)
		case RaidoServiceTunnelStartProcedure:
			raidoServiceTunnelStartHandler.ServeHTTP(w, r)
		case RaidoServiceTunnelStopProcedure:
			raidoServiceTunnelStopHandler.ServeHTTP(w, r)
		case RaidoServiceTunnelPauseProcedure:
			raidoServiceTunnelPauseHandler.ServeHTTP(w, r)
		case RaidoServiceTunnelResumeProcedure:
			raidoServiceTunnelResumeHandler.ServeHTTP(w, r)
		case RaidoServiceTunnelAddRouteProcedure:
			raidoServiceTunnelAddRouteHandler.ServeHTTP(w, r)
		case RaidoServiceTunnelRemoveRouteProcedure:
			raidoServiceTunnelRemoveRouteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRaidoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRaidoServiceHandler struct{}

func (UnimplementedRaidoServiceHandler) ProxyStart(context.Context, *connect.Request[service.ProxyStartRequest]) (*connect.Response[service.ProxyStartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.ProxyStart is not implemented"))
}

func (UnimplementedRaidoServiceHandler) ProxyStop(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.ProxyStop is not implemented"))
}

func (UnimplementedRaidoServiceHandler) AgentList(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.AgentListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.AgentList is not implemented"))
}

func (UnimplementedRaidoServiceHandler) AgentRemove(context.Context, *connect.Request[service.AgentRemoveRequest]) (*connect.Response[service.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.AgentRemove is not implemented"))
}

func (UnimplementedRaidoServiceHandler) TunnelList(context.Context, *connect.Request[service.Empty]) (*connect.Response[service.TunnelListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.TunnelList is not implemented"))
}

func (UnimplementedRaidoServiceHandler) TunnelStart(context.Context, *connect.Request[service.TunnelStartRequest]) (*connect.Response[service.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.TunnelStart is not implemented"))
}

func (UnimplementedRaidoServiceHandler) TunnelStop(context.Context, *connect.Request[service.TunnelStopRequest]) (*connect.Response[service.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.TunnelStop is not implemented"))
}

func (UnimplementedRaidoServiceHandler) TunnelPause(context.Context, *connect.Request[service.TunnelPauseRequest]) (*connect.Response[service.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.TunnelPause is not implemented"))
}

func (UnimplementedRaidoServiceHandler) TunnelResume(context.Context, *connect.Request[service.TunnelResumeRequest]) (*connect.Response[service.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.TunnelResume is not implemented"))
}

func (UnimplementedRaidoServiceHandler) TunnelAddRoute(context.Context, *connect.Request[service.TunnelAddRouteRequest]) (*connect.Response[service.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.TunnelAddRoute is not implemented"))
}

func (UnimplementedRaidoServiceHandler) TunnelRemoveRoute(context.Context, *connect.Request[service.TunnelRemoveRouteRequest]) (*connect.Response[service.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.RaidoService.TunnelRemoveRoute is not implemented"))
}
